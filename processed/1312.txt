n the comic pokes fun at haskell a functional programming language functional programming languages are based on the mathematical concept of a function that is two calls to a function always produce the same results given the same inputs side effects of a function call are changes to the program state or observable interactions with the outside world other than returning a value as a simple example if a sum function changes a global variable or prints the sum before returning it those are side effects functions in most other languages frequently have side effects typically making them hard to analyze functional programming languages seek to avoid side effects when possible pure functional programming language like haskell push this agenda by isolating the inevitable side effects input/output at least through the type system more specifically in monads for haskell the first joke says that haskell only has no side effects because no one ever uses haskell programs even in a traditional procedural programming language like c if the program does not run it can't have side effects in haskell effects are first class values this means that you can use effects just like any value assign them to a variable pass them around or manipulate them to make new and different effects thus there are technically no side effects only primary effects the title text is a joke about haskell's lazy evaluation the basic concept is that a value is not computed until it is actually used thus it is possible to have a name representing the entire infinite list of fibonacci numbers however until a particular element of the list is accessed no work is actually done the joke plays on called referring to calling a function vs called for requesting; thus haskell may have value but no one has either invoked it to get that value or requested such a language a simpler example may be  or  bool&gt; bool&gt; bool or true _ = true or _ b = b  or 2 + 2 == 4 even fibonacci 10000  the or function is defined as a normal function but can conclude instantly without computing the 10000th fibonacci number a daunting task since this second parameter isn't necessary&#160; true or whatever is always true in reality haskell is indeed actively used though it is not one of the most popular languages it is in particular used by some financial institutions safety conscious start ups and websites there are several active web frameworks in haskell like randall's own 1  