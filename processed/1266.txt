n in 1936 alan turing proved that it's not possible to decide whether an arbitrary program will eventually halt or run forever this was later called the halting problem by martin davis the official definition of the problem is to write a program actually a turing machine that accepts as parameters a program and its parameters that program needs to decide in finite time whether that program will ever halt running these parameters the halting problem is a cornerstone problem in computer science it is used mainly as a way to prove a given task is impossible by showing that solving that task will allow one to solve the halting problem randall however is providing a simpler solution he implements his own code for the question does it halt which always returns true and directs us to think about the bigger picture from a physical perspective according to our current understanding of physics this is right given enough time any program will halt this is due to factors external to the actual program sooner or later electricity will give out or the memory containing the program will get corrupted by cosmic rays or corrosion will eat away the silicon in the cpu or the second law of thermodynamics will lead to the heat death of the universe nothing lasts forever and this includes a running program from a mathematical point of view this is not true a turing machine will never have a hardware failure because it's not a physical machine it's a theoretical construct and it's defined mathematically independent of any physical hardware similarly xe2x85x93 + xe2x85x93 + xe2x85x93 = 1 no matter what any physical hardware you are computing it on claims another interpretation of randall's code is that the program in the parentheses is actually being run whenever his function is called as is consistent with some programming constructs in this case the function would wait until the program finishes and exits before returning true therefore randall's function is mathematically accurate it does not solve the problem though as it simply shifts the question to whether the function itself will ever halt from a practical point of view there are of course times that a programmer would want to return false since some programs can be mathematically shown to run forever the title text further relates to this issue by claiming to have found a case where something need not die but randall does not know how to actually show it to anyone because just the fact everyone will die sooner than it doesn't prove it will not die the wording of the title text might also be a reference to fermat's last theorem it should be noted that randall's solution barring its unsoundness solves more than the halting problem in the form it is usually stated the halting problem requires two parameters a program and its parameters while randall's function only accepts one the program the question of whether a program halts for every input can be shown to be even harder to solve than the halting problem meaning that even if a turing machine had an additional instruction allowing it to check whether a program halts with given parameters it still could not always confirm that a given program that halts for all parameters does so the code in this comic is written in pseudocode to demonstrate the algorithm rather than an implementation in some existing programming language the syntax resembles a mix of c and python  