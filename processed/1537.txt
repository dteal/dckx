n this comic is a series of programming jokes about a ridiculous new programming language perhaps inspired by mathematica and wolfram language xe2x80x94 the latter was used by randall many times before maybe it's also inspired by gary bernhardt's codemash 2012 lightning talk on javascript's unpredictable typing in the talk the highly technical audience was unable to correctly guess the results of adding various javascript types and roared with laughter when they were revealed the programming language shown in this comic has types even more unpredictable than javascript most regular programming languages distinguish types eg integers strings listsxe2x80xa6 all of which have different behaviours but for instance the operation + is usually conventionally defined over more than one of these types applied to two integers it returns their sum  applied to two strings denoted by being enclosed in quotes it concatenates them &gt; 2 + 35 &gt; 123 + abc123abc while these behaviours are standard conventional and intuitive there is a huge amount of variation among programming languages when you apply an operation like + to different types one logical approach is to always return an error in all cases of type mixing but it is often practical to allow some case mixing since it can hugely simplify expressions variation and lack of a clearly more intuitive behaviour leads some languages to have weird results when you mix types weird results abound in the new xkcd programming language   2 + 2 uses the + operator on a number and a string in some programming languages this might result in the number 4 in math addition or 22 in string concatenation; however the new language converts the string to an integer adds them to produce 4 and converts back to a string alternately it may instead be adding 2 to the ascii value of the character 2 50 resulting in the character 4 52 this is somewhat consistent with the behavior for item 4  2 +  adds a string to an array or list this first inexplicably converts the string to a number again and then it literally adds the number to the list by prepending it and then the result the entire array is converted to a string again  2/0 divides 2 by 0 and quite reasonably results in nan meaning not a number though in most languages as prescribed by the ieee 754 standard for floating point numbers dividing a nonzero number by zero would instead return an infinity value  2/0+2 adds 2 to nan 2 is added to the string nan as again the number is converted to a string for apparently no reason which produces nap if the language's convention is to add to the ascii value of a character or string then in this case it added 2 to the character n 78 resulting in p 80 how the string nap is converted into a bare nap with undefined meaning is not clear it is possible the nap means not a positive as opposed to not a negative  it could also mean not a prayer as you're taking a nan condition and trying to do more with it  + in many languages two consecutive double quote characters denote an empty string so this expression would concatenate two empty strings resulting in an empty string  however  it appears that this language treats only the outermost quotes of the expression as the string boundary so all of the characters between them become part of the literal string producing '+' in many programming languages you can use both  or ' to delimit strings and both behave similar if not identical alternately theses two consecutive double quotes may be treated similar to the way that consecutive single quotes are treated in a sql string with the first quote escaping the 2nd this would result in a string that contains the value +  123+2 seems to test whether it's sound to append 2 to the list 123 and concludes that it doesn't fit the pattern returning the boolean value false it could conceivably also be the result of an attempt to add 2 to the set 123 which already contains that element although 123 would be a more common notation for sets  123+4 returns true for much the same reason  2/2 3/2+1/2 is a floating point joke floating point numbers are notoriously imprecise with precise mathematics 3/2+1/2 would be exactly 2 hence the entire thing would evaluate to 2/0 or nan in randall's new language however the result of 3/2+1/2 is just slightly off which makes the result just slightly off of nan which would be ridiculous in a real language the ironic thing is that fractions with 2 in the denominator are not the kind of numbers that typically suffer from floating point impreciseness additionally if there was indeed a rounding error the actual calculation becomes something like 2/0000000000000013 which should not return a nan since it is not division by zero it is most likely not a coincidence that there are 13 zeros before the 13 at the end of the decimal  range  normally wouldn't make any sense however the new language appears to interpret it as ascii and in the ascii table character #32 is space #33 is  and #34 is  so instead of interpreting   as a string it seems to be interpreted as 34 32 34 in ascii and then range appears to transform this into 34 33 32 33 34 the ranges between the numbers which interpreted as ascii becomes ''''' '''''  +2 adds 2 to the line number 10 and returns the result 12  2+2 would normally be 4 however the interpreter takes this instruction to mean that the user wishes to increase the actual value of the number 2 aka the literal value by 2 for the remainder of the program making it 4 and then reports that the work is done  the result can be seen in the subsequent lines where all 2s are replaced by 4s this could be a reference to languages like fortran where literals could be assigned new values  14 range15 would normally return 12345; however because the value of 2 has been changed to 4 it returns 14345 this also affects the line number by changing the 2 in 12 to 4 resulting in the line number 14  13 floor105 should return 10 the floor of a decimal number is that number rounded down; however it instead returns ascii art of the number on a floor  the title text contains three further examples relating to color colorrgbblue returns the hexadecimal code for pure blue as would be used in html for example which is how a real programming language might work the lookup for yellowish blue returns nan not a number again which makes sense at one level because there is no such color as yellowish blue yellow and blue are opposites on the rgb color triangle making yellowish blue an impossible colour which can only be perceived with great difficulty through contrived figures however a more typical result would have been a failure indicating that the color database does not include the name in the same way that a typo such as bluw would note that html does explicitly attempt to handle all color names for the record yellowish blue is a dark blue with an imperceptible amount of red xe2x80x94 #0e00b0 similarly sorting the colors would normally produce some defined ordering such as alphabetical but in this language it generates the string rainbow it seems that randall's new language understands color theory in an unusually deep way  