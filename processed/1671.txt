n when fixing/improving an existing computer program programmers sometimes need to read understand and improve old code the older a piece of code is the less it tends to conform to modern programming practices and the more likely it is to be arcane bullshit from the perspective of a 21st century programmer randall seems to feel that willingness to deal with arcane bullshit is a catch 22 that prevents 80s arcane bullshit from being fixed someone completely unwilling to deal with arcane bullshit would lack the patience to learn how to program someone extremely willing to wade through an 80s programmer's arcane bullshit is likely to nerd snipe 356 nerd sniping themselves into fiddling with kernels which are inherently arcane bullshit instead of making useful code cueball is in the middle of the scale smart and patient enough to make the 80s bullshit worse but not smart and patient enough to know how to fix it this comic could be a reference to changes in programming methodologies as the first computer programs were written in the 40's and 50's they were prone to becoming spaghetti code where the flow of execution would jump from one part of the program to another using the jump which gives no state information while this method of programming can work very quickly it makes it difficult to predict program flow and can create interdependencies that are not obvious in the basic language jump was called goto and the courses for new programmers argued that using goto in all but trivial cases was a very bad idea on the other hand old programmers argued that calculated goto was a sexy way of programming to combat the problem computer scientists have relied on increasing the levels of abstraction and encapsulation by developing structured programming procedural programming and oop object oriented programming in structured programming you break your program into well defined blocks of code with specified entry and exit points using the stack a portion of memory dedicated to storing information / program state it is possible to call a block of code and then have that block of code return control to the point that called it after it has done what was requested very quickly it was decided to mark these blocks of code as functions or procedures making it a lot easier to know how to call the blocks and edit them languages that made this a focus include pascal modula and c structured and procedural programming were well entrenched in the 80's most systems programming was done in mid  or low level languages which to improve performance don't do much to control access to the data structures in the programs because they are low level the code requires many steps to do seemingly easy things like draw a box on a screen making it hard for a non experienced programmer to understand what is happening although the idea of oop was around as early as the 1950's it was not implemented in a widespread fashion until the 1990's oop encapsulates the data structures inside of functions so rather than manipulate the variable directly you call the data structure and tell it to do something this additional level of abstraction can make it a lot easier to work on varied data it also can protect the program data from unexpected changes by other sections of the program because code in the 80's was typically done at a much lower level it can be hard for programmers used to having the language and libraries do more work for them it also meant that programmers would often hard code expectations into their source code such as the number of files that can be opened at once or size of the operating system disk buffers rather than make them configurable while the program is running or even while it was being loaded this means if you need the program to handle a larger file you might need to recompile it after finding and changing all the places in the code that assume the smaller max file size as such few people are willing to try to surpass the massive barrier to learning this group is on the left to the right are people who have gotten so used to the tools and conventions of the 80's that they spend all of their time adjusting and recompiling the kernel of their computers to match their current needs instead of actually creating new programs in the center is cueball presumably representing randall who has learned enough to try and fix code but not enough for his fixes to actually work as programs age they often lose support from the initial project head and die out no longer supported on new computers so as the title text says learning more coding from the '90s and after is necessary for also breaking everyone else's computers this could also be a comment on hacking and the advent of the internet and the technologies behind that tcp/ip html css php being 90s/2000s computers in the 80s were typically stand alone so what you are learning can only be applied to your machine to break everyone else's you need to understand networking the title text might be a reference to various recently discovered security vulnerabilities in open source software in some cases underskilled programmers have provided flawed code for critical infrastructure with very little review resulting in global computer security disasters randall described some of these in 424 security holes 2008 1353 heartbleed and 1354 heartbleed explanation 2014 other recent examples include shellshock and vulnerabilities in the linux kernel involving the perf and keyrings subsystems  