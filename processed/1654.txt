n most users of computers today are used to simple easy installation of programs you just download a exe or a pkg double click it and do what it says sometimes you don't even have to install anything at all and it runs without any installation however when things are more homebrew for example downloading source code things are more complicated  under unix like systems which this universal install script is designed for you may have to work with build environments and makefiles and command line tools to make this process simpler there exist repositories of programs which host either packages of source code and the things needed to build it or the pre built programs when you download the package it automatically does most of the work of building the code into something executable if necessary and then installing it however there are many such repositories such as pip and brew among others listed in the comic if you only know the name of a program or package you may not know in which repositoryies it resides the installsh file provided in the comic is a shell script which attempts to fix this problem by acting as a universal install script that contains a lot of common install commands used in various unix like systems this script in particular is interpreted by the bourne again shell bash which is denoted by the #/bin/bash in the first line in between each of the install commands in the script is the &amp; character which in posix compatible shells including bash a popular shell scripting language means it should continue to run the next command without waiting for the first command to finish also known as running in the background this has the effect of running all the install commands simultaneously; all output and error text provided by them will be mixed together as they are all displaying on the screen around the same time the script accepts the name of a program or package as an argument when you run it this value is then referenced as $1 argument number 1 everywhere the script says $1 it substitutes in the name of the package you gave it the end result is the name being tried against a large number of software repositories and package managers and hopefully at least one of them will be appropriate and the program will be successfully installed near the end it even tries changing the current working directory to that which is assumed to hold the package to be installed and then runs several commands which build the program from source code all in all this script would probably work; it runs many standard popular repository programs and package managers and runs the nearly universal commands needed to build a program  most of the commands would simply give an error and exit but hopefully the correct one will proceed with the install one of the more subtle jokes in the comic is the inclusion of apt get and sudo apt get in the same script good unix practice dictates never logging in as root; instead you stay logged in as your normal user and run system admin accounts via sudo program name this prevents accidental errors and enables logging of all sensitive commands a side effect of this however is that an administrator may forget to prefix her command with sudo and re running it properly the second time this is a common joke in the linux community an example of which can be found at viral tweet which shows a humorous workaround for the issue since randall's script does not use sudo for any but the apt get command there are two possibilities the script itself was run via the root user or via sudo in which case the sudo apt get is not needed or the script was run as a normal user in this case the commands may install a local as opposed to system wide version depending on local conditions for instance npm will install a copy of the package under $home/npm and pip would work as long as the user is working in a virtualenv which is standard practice for python developers sudo has also been used both by randall in 149 sandwich and by jason fox to force randall to let him appear on xkcd with 824 guest week bill amend foxtrot the tool curl downloads files from the network eg the internet for example curl http//xkcdcom/ downloads and displays the xkcd html source the pipe | in the script attaches the output of the command before the pipe to the input of the command after the pipe thus running whatever commands exist in the web content although this curl|sh pattern is a common practice for conveniently installing software it is considered extremely unwise; you are running untrusted code without validation there may be a mitm who modifies the code you receive or the remote system could have been hijacked and the code made malicious most local package managers eg apt yum offer digitally signed packages that thwart this problem you can find many examples of software providers suggesting a curl|sh solution at curlpipesh there appears to be a bug with the &amp; at the end of the git clone line; since a git repository typically contains program source code not executables it may have been intended to retrieve the source code with git and then compile and install the program in the next line in this case the single &amp; should be replaced with &amp;&amp; an operator that will run the second command only if the first one has completed successfully this plays into a second bug on the configure line where the placement of the &amp; means that only the make install command will be run asynchronously after the configure and make steps have finished in sequence though this would likely fail due to a lack for write permissions unless it was run with sudo to make success as likely as possible the two lines should be like this or script should be executed twice  git clone https//githubcom/$1/$1 &amp;&amp; cd $1; /configure; make; sudo make install &amp;  since all commands are running in the background any command that requires user input will stop and wait until brought to the foreground a common request would be for a database password or if it is allowed to restart services for the installation this could lead to packages being only partly installed or configured see more about using yes below the title text mentions the possibility that the same program may be in multiple repositories so in this case the script will download and install several versions or it may fail on a number of repositories in which case usually nothing bad happens since all the commands come from different operating systems versions or distributions it is not very likely that more than one will work with the exception of pip/easy_install and the two forms of apt get or even exist on the same system it mentions that adding a way of automatically saying yes to questions asked during the different repository fetching programs' running by making them read input from another program that writes a nearly endless stream of ys could simplify things further this would not work for any curses based menus or to answer any more complicated questions adding 2&gt;/dev/null to a command redirects the second output stream the error stream to the null device driver which discards all writes to it meaning errors the package not existing will not be sent to the screen  