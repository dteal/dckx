n due to the complex relationships within a program or other system making an alteration can cause problems with other parts of the program this can lead to a seemingly small fix becoming a long chain of debugging and consecutive fixes which cueball is in the middle of a typical example of recursion often used in xkcd as cueball attempts to solve the initial computer issue he creates more problems along the way so he should have followed the golden rule if it ain't broke don't fix it the title text suggests that the original problem was not stopping the function of the program and the benefits that cueball may have hoped to achieve with the mentality of if it ain't broke break it and fix it are being consumed by the expanding effort of the fix  attempting to solve all of these problems results in more time wasted than he hoped would be gained by optimizing the inefficient tool described in the title text though depending on the tool he could publish the changes once completed allowing the community using that tool to gain back the man hours collectively wondering if something is worth doing has been a subject in 1205 is it worth the time this comic is similar in thesis to 1445 efficiency and 1319 automation other relevant comics include 1171 perl problems where using regular expressions causes more problems than it solves 349 success where randall comments on the goals of a project decreasing in optimism as a project goes on due to more and more problems distracting from the original and 1579 tech loops which shows that attempting to fix one problem in a piece of software can force a developer to delve into seemingly irrelevant parts of the relevant tech loop that the software in question is trapped in  