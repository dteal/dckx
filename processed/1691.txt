n in computing optimization is the practice of making a computer program work as quickly as possible typically by designing it to perform the fewest calculations premature optimization is the practice of trying to optimize parts of a program before such optimization has been shown to be needed optimization can prove to have been a waste of time if parts of the program are later changed or discarded or if the optimized code is only a small part of the workload making a routine 10 times faster doesn't help much if that routine is only consuming 1% of the running time to begin with and it may result in more complicated and buggier code this comic is a flowchart making fun of the difference between prematurely optimizing and doing things right in the first place it tells you that if you are using it to decide whether you are optimizing prematurely then you're optimizing prematurely the humorous conclusion is that if there is any doubt whether an optimization is premature then it is premature another layer of humor is provided by the minimalism and directness of the flowchart which suggests that it has itself been prematurely optimized the title text's root of all evil refers to donald knuth's paper structured programming with goto statements 19741 in which he wrote   there is no doubt that the grail of efficiency leads to abuse programmers waste enormous amounts of time thinking about or worrying about the speed of noncritical parts of their programs and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered we should forget about small efficiencies say about 97% of the time premature optimization is the root of all evil yet we should not pass up our opportunities in that critical 3%  the title text takes the joke a step further by proposing optimizing a brand new project by introducing a procedure to determine whether a possible optimization is premature which is obviously a premature optimization it pokes fun at time wasting behavior by obsessively perfectionist coders who develop tools to analyze aspects of their software such as performance in some fields such as compilers or database design such tools can be useful and productive the 3% mentioned by knuth but the usage suggested here is more appropriately covered by instinct common sense and observation of the behavior of the completed program the title text may also be poking fun at the comic since the comic itself may be the system used to determine premature optimization flowcharts are often used in xkcd including the mostly non farcical 1688 map age guide one week prior to this comic inefficiency another xkcd theme was featured in the comic prior to this one  