n\nHTML is a markup language used in web development, and is the subject of this comic. The comic employs multiple poor HTML practices while asking the rhetorical question of how best to annoy web developers, effectively answering the question that it poses.\nFirst, in HTML, all tags should be matched with both an open and close tag of the same type &lt;div&gt;Like this&lt;/div&gt;. Before HTML 4.01, all tags were uppercase (technically elements were uppercase and attributes were lowercase "to improve readability" [1]) to make it easier on the browser to parse what was markup and what was content on the page. As is the case with nearly every change to the HTML specification, many developers slowly got lazy and stopped making every tag uppercase forcing browser developers to check for both upper and lowercase as they parsed the markup. When the specification was bumped to XHTML 1.0 it stated that no one should use uppercase tags any more, everything should be lowercase.\nAnother basic idea of HTML is that all tags, or elements, must be properly nested \xe2\x80\x94 although they have slightly different meanings, the words "elements" and "tags" are generally used interchangeably. That is, anything inside a div must be closed before the div is closed.\n\n\n\n Correct\n\n Incorrect\n\n\n\n&lt;div&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Correctly nested&lt;/li&gt;\n    &lt;/ol&gt;\n&lt;/div&gt;\n\n\n\n&lt;div&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Incorrectly nested&lt;/li&gt;\n    &lt;/div&gt;\n&lt;/ol&gt;\n\n\n\nThe rules of proper nesting also put restrictions on which tags can be placed where \xe2\x80\x94 "block" elements, such as &lt;div&gt; cannot be placed inside "inline" elements, such as &lt;span&gt;, and inline elements must be placed inside a block element of some kind. Thus, &lt;span&gt;&lt;div&gt; is forbidden, even if the tags are closed in the proper order.\nFurther, web developers make a distinction between semantic and structural elements. Semantic elements contain a clue in their name as to what kind of an element they are \xe2\x80\x94 for example, an &lt;article&gt; tag contains an article, such as a blog post or news article, while an &lt;ol&gt; tag contains an ordered list. (It\'s wise to note that this is not an absolute rule; it\'s possible to put non-article content in an &lt;article&gt;, it\'s just not recommended.) Semantic tags do not, however, indicate how their contents are to be displayed; your browser might display an &lt;article&gt; in the default font, layout, and placement, while mine, a screen reader, might ignore everything on the page &lt;article&gt;s, and read &lt;article&gt;s in a soothing voice.\nStructural tags, on the other hand, give no clues as to what they contain; they just indicate how a web page is to be laid out. &lt;span&gt; and &lt;div&gt; are structural tags; they can contain anything. Their definitions in HTML simply indicate that &lt;div&gt; is a block tag (it can affect both what the text looks like and where it is on the page; by default, it is displayed in a separate block from the rest of the text in the page, and has at least one line break before and after its display) and &lt;span&gt; is an inline tag: it affects what its text looks like, but not where it is on the page. Without additional attributes, it\'s impossible for a browser to tell what\'s supposed to be inside a &lt;div&gt; or a &lt;span&gt;, which means that my screen reader can\'t just pluck out the blog posts and read those.\n\nCurrently, the standard of usage is shifting toward using semantic tags over structural tags, since they provide more information to browsers and people reading the source code of web pages. HTML5, the most recent version of the standard web development markup language, is introducing many semantically meaningful tags that can be styled using CSS to follow the same behavior as a div or span, but that are easier to understand when reading the markup or parsing it with a non-standard browser. For example, 