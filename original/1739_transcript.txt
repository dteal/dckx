n\nDue to the complex relationships within a program or other system, making an alteration can cause problems with other parts of the program. This can lead to a seemingly small "fix" becoming a long chain of debugging and consecutive fixes, which Cueball is in the middle of, a typical example of recursion often used in xkcd. As Cueball attempts to solve the initial computer issue, he creates more problems along the way. So he should have followed the golden rule: "If it ain\'t broke, don\'t fix it".\nThe title text suggests that the original problem was not stopping the function of the program and the benefits that Cueball may have hoped to achieve with the mentality of "If it ain\'t broke, break it and fix it" are being consumed by the expanding effort of the fix.  Attempting to solve all of these problems results in more time wasted than he hoped would be gained by optimizing the inefficient tool described in the title text. Though depending on the tool, he could publish the changes once completed, allowing the community using that tool to gain back the man-hours collectively. Wondering if something is worth doing has been a subject in 1205: Is It Worth the Time?\nThis comic is similar in thesis to 1445: Efficiency and 1319: Automation. Other relevant comics include 1171: Perl Problems, where using regular expressions causes more problems than it solves, 349: Success, where Randall comments on the goals of a project decreasing in optimism as a project goes on due to more and more problems distracting from the original, and 1579: Tech Loops, which shows that attempting to fix one problem in a piece of software can force a developer to delve into seemingly irrelevant parts of the relevant tech loop that the software in question is trapped in.\n\n