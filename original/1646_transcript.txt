n\nA Twitter bot is a program that can post automatically to Twitter. Although Twitter bots can be very elaborate, a lot of people write simple bots for fun that simply engage in automated wordplay.\nCueball thinks he\'ll write a Twitter bot, figuring out it won\'t be too hard. The web searches he makes tell what happens next, i.e. the bot balloons in complexity until it starts following its own goals and Cueball no longer has any control over its actions.\nThis comic examines how a seemingly simple task can often balloon in complexity if all of the requirements are not understood, while at the same time presenting the stereotypical scenario where an unassuming idea results in the accidental creation of malevolent AI, which then attempts to destroy humanity.\nThe story, as told by the web searches, is as follows:\n\nHow to write a Twitter bot: Cueball has no idea where to start, so he just searches for basic advice on writing generic Twitter bots.\nPython Twitter library: The Python programming language has a nice library that interfaces with the Twitter API. This does all the tricky work of authenticating the bot\'s identity and sending the messages, so the user can concentrate on the fun parts.\nMachine learning: Machine learning is the basis of artificial intelligence.\nCloud hosting: While it\'s possible to host a Twitter bot on your server, you can also have it hosted by someone else - such as Amazon - in order to take advantage of their powerful computers and robust internet connection.\nBot troubleshooting: Cueball is having some trouble with his bot and is looking for some information about resolving the problem.\nLocked out of EC2 instance: EC2 is a hosting service by Amazon that allows users to run their code in the hosting server. Cueball was running his bot from EC2, but now he\'s unable to access his account. He\'s searching for advice on how to regain access.\nBot changed own password?: Cueball is suspecting that the reason he can\'t access his Amazon EC2 account is that the bot has changed the password without Cueball\'s knowledge or consent. Since the bot was never programmed to change any passwords at all, the fact that it has done so is pretty scary, as one wonders what other things the bot is doing without being programmed for it.\nHow to fight a bot: Cueball is trying to physically fight the bot, but he\'s apparently unsuccessful and the fight results in a loud "boom" and "pew, pew, pew" sounds. The situation is scarier than before, as it starts to resemble the "killbot hellscape" in 1613: The Three Laws of Robotics.\nCheap flights to Australia: Cueball has completely given up the possibility of regaining control of the bot, so he flees to Australia instead. Randall lives in Massachusetts, USA, so Australia would be a far, far away land for him.\n\nIn the title text the  Python flag enable three laws reference that the Python language is known for having easy constructs to perform difficult tasks (see 353: Python). In this case, it is either assumed that (or Cueball is making yet another query to see if) Python has a configuration flag (i.e., a boolean value) which, when set to "enabled" (or "true", as opposed to "disabled", or "false"), will cause the bot to follow Isaac Asimov\'s famous Three Laws of Robotics. This is a simple enough step, and it might have been enough to prevent the "killbot hellscape" scenario, like the rule is depicted doing in the top panel of 1613: The Three Laws of Robotics. It won\'t cause the bot to stop being in control, however, but if the bot is following the rules strictly it would not be allowed to even make Cueball uncomfortable, which he already becomes when it changes his password! It is unclear if this message is something he actually desperately tries, only searches for (like the rest of the queries) or something (someone shouts at him) that he should have done before creating the bot in the first place. Or the title text is simply Randall\'s comment on his own comic, like an idea to add that flag in Python. Just in case.\n\n