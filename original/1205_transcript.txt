n\nThe comic is a straightforward chart showing the amount of work (time) one can dedicate to making a task more efficient, in order not to spend more time optimizing the task than the total time saved. This may illustrate the fact that computer scientists often try to optimize tasks they are likely to perform again in the future - a common goal in their work - even though the work needed for that optimization can itself prove much longer than the time saved when doing the task again; this was previously referenced in 974: The General Problem.\nE.g. if you do some task every week once, and you are able to save 1 minute of time by doing some preparatory work (e.g. build or buy a tool), you can spend 4 hours doing this preparatory work, and you will, across five-years time, come even. Any less time spent doing the preparatory work, and you will profit from it.\nThe calculation on which the chart is based, for this example:\n\n5 years / 1 week = 260 occurrences of the task\n260 occurrences \xc3\x97 1 saved minute = 260 saved minutes = 4.3 hours\n\nTherefore, 1 minute saved every week would, across five years, save over 4 hours of your time.\nOr, in algebraic form:\n\nTotal time shaved off across 5 years = 5 \xc3\x97 "How often you do the task every year" \xc3\x97 "How much time you shave off"\n\nThe grayed out areas represent times which are either impossible to save, or where, if you could save this much (say 6 hours on one day), it would almost be worth it no matter how long it takes. For instance it is impossible to shave 1 hour off a task if you perform it more than 24 times a day \xe2\x80\x93 the total time shaved off per day would amount to more than one day, and thus you could not have performed the task this many times in a day to begin with. On the other hand, 6 hours shaved off for one day is not impossible, but the net benefit would be so great, that it would very quickly earn it self in again almost no matter how long it takes. If the assumption is that a work day is 8 hours, then even if it took 2 years to do the improvement, you would already have earned it in after less than five years in total - both with the 2 years to make it and the time it takes to save 2 years (2.67 years in this case for at total of 4.67 years).\nThe comic assumes that equal amounts of time have equal value, which is not necessarily true. For an extreme example, consider programming a telephone with speed dials to be used when there is a fire or to call an ambulance or the police. This may take longer than the time saved when the call is placed, but it is worthwhile to spend a large amount of free time to save any time during an emergency.\nOf course, all these conclusions presume you are the only one that benefits. If the savings can be easily adapted by others - for example, computer code for a program that automates a task for hundreds of people - then the amount of time that can be spent increases. Indeed, in some cases, when optimizing for others, spending far more time than they save can be worth it, if the people you\'re working for are paying you for the product and the time savings keep them happy and likely to keep paying you. And if what you\'re optimizing is a business process that\'s unlikely to go out of date with your employer\'s current tools or its current products, then you may have more than 5 years to amortize the improvement.\nThe title text points out the time you spend studying this comic detracts from your overall efficiency, and concludes that maximizing efficiency would require optimal use of every second and finishes of very philosophically by pointing out that every second you use counts towards your life total - also those you spend reading and/or editing a wiki about a web comic...\nThe comic derives humor from the absurd conclusions of hyper-efficiency, which have been examined in What if? - Cost of Pennies, and also in 951: Working which is devoted to insufficient economy, where the money saved is compared to the time wasted while looking for a bargain. In 1319: Automation Randall investigates how bad it really goes when you decide to automate a program to save you time... See also the Time management category.\n\n