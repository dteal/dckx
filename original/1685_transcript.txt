n\nAdobe Photoshop is a commonly used application for image manipulation. One of its features is the Patch tool, which allows the user to overwrite parts of the image, replacing them with a copy of another area of the same image. It is often used for \xe2\x80\x9cpatching up\xe2\x80\x9d photographs by overwriting scratches or other visible damage to the photo. Another of Photoshop\xe2\x80\x99s features is \xe2\x80\x9ccontent-aware fill\xe2\x80\x9d, which could also be described as \xe2\x80\x9ccontent-aware inpainting\xe2\x80\x9d. It works similarly to the Patch tool, but automatically generates a replacement texture from the area surrounding the deleted part instead of copying a user-specified area exactly.\nGNU patch is a program that replaces only parts of code with an updated version, without requiring the user to download the entire source code. Here, it appears the author was told to \xe2\x80\x9cpatch\xe2\x80\x9d the code, but used Photoshop to do this instead of GNU patch, with devastating results. Although the title text suggests that if you did this enough times the code would eventually compile, this would never happen. In fact, Photoshop could only edit an image of the text and not the text itself. However, it could work if optical character recognition (OCR) were integrated into the workflow as well.\nThe comic blurs the difference between text (in which letters and symbols represent discrete values, such as 65 being the number for the letter A in the ASCII encoding standard, and it\'s relatively easy for a program compiler to interpret combinations of these values as keywords and other programming constructs) and graphics (where the letters and symbols in the comic are actually represented by pattern of colored dots), playing with the idea that the patch metaphor can be used on both (although with different meanings). There are common and straightforward processes for converting text information to images, such as printing, which can convert text to a graphics format very faithfully. The reverse, however, requires the use of optical character recognition (OCR), which attempts to figure out which letter or symbol certain patterns of dots "look like". OCR could be effective in converting some of the image in the comic back to usable text, however it would fail on some of those patterns that have been mangled and don\'t look like any existing characters or symbols. A compiler can only operate on text data, so converting the graphic back into text would be a requirement to even begin to attempt to compile it, a step omitted in the title text.\nThe code appears to be written in Python, a programming language often referred to in xkcd. A few of the function names that can be recognized are "isPrime" and "quicksort", both elementary programming algorithms. It was also apparently originally edited using a Python-aware programming text editor, which is able to use different colors for different programming elements. For example, it appears to use red for keywords, blue for variables, and black for other elements, however because of the mangling from the use of the wrong patching program, that doesn\'t appear to be consistent. Since the patching replaced graphical elements rather than whole characters, there are examples of symbols that are combination of two different characters, and when the original two characters were rendered in different colors the resulting non-character could be in two colors, or the resulting "word" might be rendered in multiple colors.\nThe comic brings to attention the high rate of Adobe Photoshop piracy. GNU Patch is available for free, even for Windows, and Mac OS X. So the comic implies that Adobe Photoshop, subscription to which costs $20/month, is more available than GNU patch. According to this poll, 58% of Photoshop copies were pirated.\nThe title text also explains that patch used the content-aware inpainting to fill in all the wasted whitespace in the code. In most programming languages, whitespace is necessary to separate words, so this would combine words that shouldn\xe2\x80\x99t be combined and create invalid code. Since the code in the image is Python, the code will be messed up even more, because Python uses whitespace as a part of its programming syntax. For example, statements are separated by new lines instead of by semicolons (;), and indentation is used instead of brackets to determine the scope of each section of code.\nThe original code was likely as follows:\n\nimport re\ndef isPrime(n):\n\tif n&lt;=1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5)+1):\n\t\tif n%i==0:\n\t\t\treturn False\n\treturn True\ndef isPrimeRegex(n):\n\tif re.match(r\'^1?$|^(11+?)\\1+$\', \'1\'*n): \n\t\treturn False\n\treturn True\ndef quicksort(a):\n\tif len(a) &lt; 2:\n\t\treturn a\n\tpivot=a[0]\n\tl=[i for i in a if i&lt;pivot]\n\tr=[i for i in a if i&gt;pivot]\n\tmid=[pivot]*(len(a)-(len(l)+len(r)))\n\treturn quicksort(l)+mid+quicksort(r)\n\nisPrime and quicksort are standard python implementations of simple algorithms (although you would not generally write a sorting algorithm in python as there are built-in algorithms available).  isPrimeRegex uses the re module to detect if a number is prime by seeing if a string containing that many 1s can be matched to 2 or more copies of some string containing at least 2 1s.\nThe comic two comics back 1683: Digital Data, also related to turning digital data into bad copies. Less than a month before quicksort was mentioned in 1667: Algorithms, and a month before that another "easy" solution to a programming problem was released in 1654: Universal Install Script.\n\n